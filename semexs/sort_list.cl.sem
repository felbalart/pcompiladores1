program
    class List : IO
        method isNil : Bool
            block [Bool]
                call abort [Object]
                bool true [Bool]
        method cons : Int hd -> Cons
            let [Cons]
                vars
                    Cons new_cell
                        new Cons [Cons]
                call init [Cons]
                    callee
                        id new_cell [Cons]
                    args
                        id hd [Int]
                        id self [List]
        method car : Int
            block [Int]
                call abort [Object]
                new Int [Int]
        method cdr : List
            block [List]
                call abort [Object]
                new List [List]
        method rev : List
            call cdr [List]
        method sort : List
            call cdr [List]
        method insert : Int i -> List
            call cdr [List]
        method rcons : Int i -> List
            call cdr [List]
        method print_list : Object
            call abort [Object]
    class Cons : List
        field Int xcar
        field List xcdr
        method isNil : Bool
            bool false [Bool]
        method init : Int hd -> List tl -> Cons
            block [Cons]
                assign xcar [Int]
                    id hd [Int]
                assign xcdr [List]
                    id tl [List]
                id self [Cons]
        method car : Int
            id xcar [Int]
        method cdr : List
            id xcdr [List]
        method rev : List
            call rcons [List]
                callee
                    call rev [List]
                        callee
                            id xcdr [List]
                args
                    id xcar [Int]
        method sort : List
            call insert [List]
                callee
                    call sort [List]
                        callee
                            id xcdr [List]
                args
                    id xcar [Int]
        method insert : Int i -> List
            if [Cons]
                binary < [Bool]
                    id i [Int]
                    id xcar [Int]
            then
                call init [Cons]
                    callee
                        new Cons [Cons]
                    args
                        id i [Int]
                        id self [Cons]
            else
                call init [Cons]
                    callee
                        new Cons [Cons]
                    args
                        id xcar [Int]
                        call insert [List]
                            callee
                                id xcdr [List]
                            args
                                id i [Int]
        method rcons : Int i -> List
            call init [Cons]
                callee
                    new Cons [Cons]
                args
                    id xcar [Int]
                    call rcons [List]
                        callee
                            id xcdr [List]
                        args
                            id i [Int]
        method print_list : Object
            block [Object]
                call out_int [Cons]
                    args
                        id xcar [Int]
                call out_string [Cons]
                    args
                        str "\n" [String]
                call print_list [Object]
                    callee
                        id xcdr [List]
    class Nil : List
        method isNil : Bool
            bool true [Bool]
        method rev : List
            id self [Nil]
        method sort : List
            id self [Nil]
        method insert : Int i -> List
            call rcons [List]
                args
                    id i [Int]
        method rcons : Int i -> List
            call init [Cons]
                callee
                    new Cons [Cons]
                args
                    id i [Int]
                    id self [Nil]
        method print_list : Object
            bool true [Bool]
    class Main : IO
        field List l
        method iota : Int i -> List
            block [List]
                assign l [Nil]
                    new Nil [Nil]
                let [Object]
                    vars
                        Int j
                            int 0 [Int]
                    while [Object]
                        binary < [Bool]
                            id j [Int]
                            id i [Int]
                    loop
                        block [Int]
                            assign l [Cons]
                                call init [Cons]
                                    callee
                                        new Cons [Cons]
                                    args
                                        id j [Int]
                                        id l [List]
                            assign j [Int]
                                binary + [Int]
                                    id j [Int]
                                    int 1 [Int]
                id l [List]
        method main : Object
            block [Object]
                call out_string [Main]
                    args
                        str "How many numbers to sort?" [String]
                call print_list [Object]
                    callee
                        call sort [List]
                            callee
                                call rev [List]
                                    callee
                                        call iota [List]
                                            args
                                                call in_int [Int]
