/* The following code was generated by JFlex 1.4.3 on 2/06/13 18:02 */

package coolc.parser;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/06/13 18:02 from the specification file
 * <tt>cool.l</tt>
 */
public class Lexer implements Parser.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int string = 6;
  public static final int YYINITIAL = 0;
  public static final int multiline_comment = 4;
  public static final int comment = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\75\1\5\2\0\1\75\22\0\1\75\1\0\1\11\5\0"+
    "\1\6\1\10\1\7\1\24\1\42\1\4\1\41\1\25\12\23\1\37"+
    "\1\40\1\31\1\32\1\34\1\0\1\33\1\47\1\13\1\43\1\65"+
    "\1\53\1\21\1\1\1\57\1\55\2\1\1\45\1\1\1\17\1\27"+
    "\1\67\1\1\1\61\1\51\1\15\1\73\1\63\1\71\3\1\1\0"+
    "\1\12\2\0\1\2\1\0\1\50\1\14\1\44\1\66\1\54\1\22"+
    "\1\3\1\60\1\56\2\3\1\46\1\3\1\20\1\30\1\70\1\3"+
    "\1\62\1\52\1\16\1\74\1\64\1\72\3\3\1\35\1\0\1\36"+
    "\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\2\1\3\1\2\1\3\1\2"+
    "\1\3\1\13\1\14\1\15\1\16\1\2\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\2\1\3\1\2\1\3\1\2\1\3\1\2\1\3"+
    "\1\2\1\3\1\2\1\3\1\5\1\30\1\5\1\0"+
    "\1\31\1\32\1\0\1\33\1\34\1\2\2\3\2\2"+
    "\2\3\1\35\1\3\1\35\2\36\1\37\1\40\1\41"+
    "\2\2\2\3\2\2\2\3\2\2\2\3\1\42\1\43"+
    "\1\2\1\42\1\43\1\3\1\2\1\3\1\2\1\3"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\2"+
    "\2\3\1\53\1\54\1\53\1\54\1\3\2\2\2\3"+
    "\1\2\1\55\1\3\1\55\2\2\2\3\2\2\2\3"+
    "\1\2\1\3\1\2\1\3\2\56\1\57\1\3\1\2"+
    "\1\60\1\3\1\60\2\61\1\62\1\63\1\62\1\63"+
    "\2\2\2\3\2\64\1\2\1\3\1\65\2\66\2\2"+
    "\2\3\2\67\1\2\1\70\1\3\1\70\1\2\1\3"+
    "\2\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\370\0\370\0\370\0\370\0\u026c\0\u02aa"+
    "\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\370\0\370\0\370"+
    "\0\u041e\0\u045c\0\u049a\0\u04d8\0\370\0\370\0\370\0\370"+
    "\0\370\0\370\0\370\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e"+
    "\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\370"+
    "\0\370\0\u07fe\0\u083c\0\370\0\370\0\u087a\0\370\0\370"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0136"+
    "\0\u0a6a\0\u0174\0\u0136\0\u0174\0\370\0\370\0\370\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0136\0\u0dce\0\u0e0c\0\u0174"+
    "\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\370\0\370\0\370"+
    "\0\370\0\370\0\370\0\370\0\u0f80\0\u0fbe\0\u0ffc\0\u0136"+
    "\0\u0136\0\u0174\0\u0174\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
    "\0\u1170\0\u0136\0\u11ae\0\u0174\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496"+
    "\0\u0136\0\u0174\0\u0174\0\u14d4\0\u1512\0\u0136\0\u1550\0\u0174"+
    "\0\u0136\0\u0174\0\u0136\0\u0136\0\u0174\0\u0174\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\u0136\0\u0174\0\u1686\0\u16c4\0\u0174\0\u0136"+
    "\0\u0174\0\u1702\0\u1740\0\u177e\0\u17bc\0\u0136\0\u0174\0\u17fa"+
    "\0\u0136\0\u1838\0\u0174\0\u1876\0\u18b4\0\u0136\0\u0174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\6\1\7\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\5\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\6"+
    "\1\7\1\6\1\7\1\50\1\51\1\52\1\53\1\6"+
    "\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\54"+
    "\1\55\1\56\1\57\1\6\1\7\1\11\5\60\1\61"+
    "\76\60\1\62\1\63\66\60\11\64\1\65\1\66\63\64"+
    "\77\0\3\6\7\0\11\6\3\0\2\6\12\0\32\6"+
    "\2\0\3\7\7\0\11\7\3\0\2\7\12\0\32\7"+
    "\5\0\1\67\76\0\1\11\67\0\1\11\7\0\1\70"+
    "\67\0\3\6\7\0\11\6\3\0\2\6\12\0\14\6"+
    "\2\71\14\6\2\0\3\7\7\0\11\7\3\0\2\7"+
    "\12\0\14\7\2\72\2\73\12\7\2\0\3\6\7\0"+
    "\11\6\3\0\2\74\12\0\10\6\2\75\20\6\2\0"+
    "\3\7\7\0\11\7\3\0\2\76\12\0\10\7\2\77"+
    "\20\7\2\0\3\6\7\0\11\6\3\0\2\6\12\0"+
    "\12\6\2\100\16\6\2\0\3\7\7\0\11\7\3\0"+
    "\2\7\12\0\4\7\2\101\4\7\2\102\16\7\24\0"+
    "\1\25\53\0\3\6\7\0\6\6\2\103\1\6\3\0"+
    "\2\6\12\0\32\6\2\0\3\7\7\0\6\7\2\104"+
    "\1\7\3\0\2\7\12\0\32\7\5\0\1\105\25\0"+
    "\1\106\77\0\1\107\42\0\3\6\7\0\11\6\3\0"+
    "\2\6\12\0\2\6\2\110\2\111\24\6\2\0\3\7"+
    "\7\0\11\7\3\0\2\7\12\0\2\7\2\112\2\113"+
    "\24\7\2\0\3\6\7\0\11\6\3\0\2\114\12\0"+
    "\10\6\2\115\20\6\2\0\3\7\7\0\11\7\3\0"+
    "\2\116\12\0\10\7\2\117\20\7\2\0\3\6\7\0"+
    "\11\6\3\0\2\6\12\0\2\6\2\120\2\6\2\121"+
    "\22\6\2\0\3\7\7\0\11\7\3\0\2\7\12\0"+
    "\2\7\2\122\2\7\2\123\22\7\2\0\3\6\7\0"+
    "\4\6\2\124\2\125\1\6\3\0\2\6\12\0\6\6"+
    "\2\126\22\6\2\0\3\7\7\0\4\7\2\127\2\130"+
    "\1\7\3\0\2\7\12\0\6\7\2\131\22\7\2\0"+
    "\3\6\7\0\11\6\3\0\2\132\12\0\32\6\2\0"+
    "\3\7\7\0\11\7\3\0\2\133\12\0\32\7\2\0"+
    "\3\6\7\0\11\6\3\0\2\6\12\0\14\6\2\134"+
    "\14\6\2\0\3\7\7\0\11\7\3\0\2\7\12\0"+
    "\14\7\2\135\14\7\10\0\1\136\66\0\10\60\1\137"+
    "\65\60\5\140\1\141\5\140\2\142\2\143\2\141\2\144"+
    "\53\140\1\0\3\6\7\0\11\6\3\0\2\6\12\0"+
    "\10\6\2\145\20\6\2\0\3\7\7\0\11\7\3\0"+
    "\2\7\12\0\10\7\2\146\20\7\2\0\3\7\7\0"+
    "\11\7\3\0\2\7\12\0\30\7\2\147\2\0\3\6"+
    "\7\0\2\6\2\150\5\6\3\0\2\6\12\0\32\6"+
    "\2\0\3\6\7\0\11\6\3\0\2\6\12\0\26\6"+
    "\2\151\2\6\2\0\3\7\7\0\2\7\2\152\5\7"+
    "\3\0\2\7\12\0\32\7\2\0\3\7\7\0\11\7"+
    "\3\0\2\7\12\0\26\7\2\153\2\7\2\0\3\7"+
    "\7\0\11\7\3\0\2\7\12\0\2\7\2\154\26\7"+
    "\2\0\3\6\7\0\11\6\3\0\2\6\12\0\4\6"+
    "\2\155\24\6\2\0\3\6\7\0\11\6\3\0\2\6"+
    "\12\0\6\6\2\156\22\6\2\0\3\7\7\0\11\7"+
    "\3\0\2\7\12\0\4\7\2\157\24\7\2\0\3\7"+
    "\7\0\11\7\3\0\2\7\12\0\6\7\2\160\22\7"+
    "\2\0\3\6\7\0\11\6\3\0\2\161\12\0\32\6"+
    "\2\0\3\6\7\0\2\6\2\162\5\6\3\0\2\6"+
    "\12\0\32\6\2\0\3\7\7\0\11\7\3\0\2\163"+
    "\12\0\32\7\2\0\3\7\7\0\2\7\2\164\5\7"+
    "\3\0\2\7\12\0\32\7\2\0\3\6\7\0\11\6"+
    "\3\0\2\6\12\0\6\6\2\165\22\6\2\0\3\6"+
    "\7\0\11\6\3\0\2\6\12\0\4\6\2\166\24\6"+
    "\2\0\3\7\7\0\11\7\3\0\2\7\12\0\6\7"+
    "\2\167\22\7\2\0\3\7\7\0\11\7\3\0\2\7"+
    "\12\0\4\7\2\170\24\7\2\0\3\6\7\0\11\6"+
    "\3\0\2\6\12\0\14\6\2\171\14\6\2\0\3\6"+
    "\7\0\11\6\3\0\2\6\12\0\20\6\2\172\10\6"+
    "\2\0\3\7\7\0\11\7\3\0\2\7\12\0\14\7"+
    "\2\173\14\7\2\0\3\7\7\0\11\7\3\0\2\7"+
    "\12\0\20\7\2\174\10\7\2\0\3\6\7\0\11\6"+
    "\3\0\2\175\12\0\32\6\2\0\3\7\7\0\11\7"+
    "\3\0\2\176\12\0\32\7\2\0\3\6\7\0\11\6"+
    "\3\0\2\6\12\0\12\6\2\177\16\6\2\0\3\7"+
    "\7\0\11\7\3\0\2\7\12\0\12\7\2\200\16\7"+
    "\2\0\3\6\7\0\4\6\2\201\3\6\3\0\2\6"+
    "\12\0\32\6\2\0\3\7\7\0\4\7\2\202\3\7"+
    "\3\0\2\7\12\0\32\7\2\0\3\7\7\0\11\7"+
    "\3\0\2\7\12\0\10\7\2\203\20\7\2\0\3\7"+
    "\7\0\11\7\3\0\2\7\12\0\6\7\2\204\22\7"+
    "\2\0\3\6\7\0\11\6\3\0\2\6\12\0\6\6"+
    "\2\205\22\6\2\0\3\6\7\0\11\6\3\0\2\6"+
    "\12\0\10\6\2\206\20\6\2\0\3\7\7\0\11\7"+
    "\3\0\2\7\12\0\6\7\2\207\22\7\2\0\3\7"+
    "\7\0\11\7\3\0\2\7\12\0\10\7\2\210\20\7"+
    "\2\0\3\6\7\0\11\6\3\0\2\6\12\0\24\6"+
    "\2\211\4\6\2\0\3\7\7\0\11\7\3\0\2\7"+
    "\12\0\24\7\2\212\4\7\2\0\3\6\7\0\11\6"+
    "\3\0\2\6\12\0\10\6\2\213\20\6\2\0\3\6"+
    "\7\0\11\6\3\0\2\6\12\0\2\214\30\6\2\0"+
    "\3\7\7\0\11\7\3\0\2\7\12\0\10\7\2\215"+
    "\20\7\2\0\3\7\7\0\11\7\3\0\2\7\12\0"+
    "\2\216\30\7\2\0\3\6\7\0\11\6\3\0\2\6"+
    "\12\0\10\6\2\217\20\6\2\0\3\6\7\0\11\6"+
    "\3\0\2\220\12\0\32\6\2\0\3\7\7\0\11\7"+
    "\3\0\2\7\12\0\10\7\2\221\20\7\2\0\3\7"+
    "\7\0\11\7\3\0\2\222\12\0\32\7\2\0\3\6"+
    "\7\0\11\6\3\0\2\6\12\0\2\6\2\223\26\6"+
    "\2\0\3\7\7\0\11\7\3\0\2\7\12\0\2\7"+
    "\2\224\26\7\2\0\3\6\7\0\11\6\3\0\2\6"+
    "\12\0\2\6\2\225\26\6\2\0\3\7\7\0\11\7"+
    "\3\0\2\7\12\0\2\7\2\226\26\7\2\0\3\7"+
    "\7\0\11\7\3\0\2\7\12\0\10\7\2\227\20\7"+
    "\2\0\3\6\7\0\11\6\3\0\2\6\12\0\6\6"+
    "\2\230\22\6\2\0\3\7\7\0\11\7\3\0\2\7"+
    "\12\0\6\7\2\231\22\7\2\0\3\6\7\0\11\6"+
    "\3\0\2\6\12\0\16\6\2\232\12\6\2\0\3\6"+
    "\7\0\11\6\3\0\2\6\12\0\12\6\2\233\16\6"+
    "\2\0\3\7\7\0\11\7\3\0\2\7\12\0\16\7"+
    "\2\234\12\7\2\0\3\7\7\0\11\7\3\0\2\7"+
    "\12\0\12\7\2\235\16\7\2\0\3\6\7\0\11\6"+
    "\3\0\2\6\12\0\10\6\2\236\20\6\2\0\3\7"+
    "\7\0\11\7\3\0\2\7\12\0\10\7\2\237\20\7"+
    "\2\0\3\6\7\0\11\6\3\0\2\6\12\0\12\6"+
    "\2\240\16\6\2\0\3\6\7\0\11\6\3\0\2\6"+
    "\12\0\22\6\2\241\6\6\2\0\3\7\7\0\11\7"+
    "\3\0\2\7\12\0\12\7\2\242\16\7\2\0\3\7"+
    "\7\0\11\7\3\0\2\7\12\0\22\7\2\243\6\7"+
    "\2\0\3\6\7\0\2\6\2\244\5\6\3\0\2\6"+
    "\12\0\32\6\2\0\3\7\7\0\2\7\2\245\5\7"+
    "\3\0\2\7\12\0\32\7\2\0\3\6\7\0\11\6"+
    "\3\0\2\6\12\0\6\6\2\246\22\6\2\0\3\7"+
    "\7\0\11\7\3\0\2\7\12\0\6\7\2\247\22\7"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6386];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\5\1\4\11\7\1\3\11\4\1\7\11"+
    "\14\1\2\11\1\1\1\0\2\11\1\0\2\11\14\1"+
    "\3\11\26\1\7\11\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private int comment_nesting = 0;
    private boolean use_string_pos = false;

    private Object yylval;

    private StringBuilder strval = new StringBuilder();
    private int strline, strcol;

    public Object getLVal() {
        return yylval;
    }

    public Position getStartPos() {

        if ( use_string_pos ) {            
            return new Position(strline, strcol);
        }

        return new Position(yyline, yycolumn);
    }

    public Position getEndPos() {
        


        if ( use_string_pos ) {

            return new Position(strline, strcol);
        }

        return new Position(yyline, yycolumn);
    }

    public void yyerror(Parser.Location pos, String msg) {
        throw new RuntimeException(String.format("error %d:%d %s", pos.begin.line, pos.begin.column, msg));
    }


    public int yylex() throws java.io.IOException {
        yylval = null;
        use_string_pos = false;
        return __yylex();
    }




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int __yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 56: 
          { return Parser.T_ISVOID;
          }
        case 58: break;
        case 1: 
          { System.out.printf("Unknown character [%s]\n",yytext());
                       return Parser.T_UNKNOWN;
          }
        case 59: break;
        case 43: 
          { return Parser.T_NOT;
          }
        case 60: break;
        case 9: 
          { strval.setLength(0); 
                strline = yyline;
                strcol = yycolumn;
                yybegin(string);
          }
        case 61: break;
        case 37: 
          { if( comment_nesting > 0) { comment_nesting--; }
                else { yybegin(YYINITIAL); }
          }
        case 62: break;
        case 19: 
          { return Parser.T_RCURLY;
          }
        case 63: break;
        case 18: 
          { return Parser.T_LCURLY;
          }
        case 64: break;
        case 11: 
          { yylval = Integer.parseInt(yytext());
                return Parser.INTEGER;
          }
        case 65: break;
        case 38: 
          { strval.append(yytext().charAt(1));
          }
        case 66: break;
        case 52: 
          { return Parser.T_POOL;
          }
        case 67: break;
        case 7: 
          { return Parser.T_MULT;
          }
        case 68: break;
        case 57: 
          { return Parser.T_INHERITS;
          }
        case 69: break;
        case 42: 
          { strval.append("\f");
          }
        case 70: break;
        case 44: 
          { return Parser.T_NEW;
          }
        case 71: break;
        case 25: 
          { strval.append(yytext());
          }
        case 72: break;
        case 26: 
          { yylval = strval.toString(); 
                use_string_pos = true;
                yybegin(YYINITIAL);
                return Parser.STRING;
          }
        case 73: break;
        case 16: 
          { return Parser.T_EQUALS;
          }
        case 74: break;
        case 31: 
          { return Parser.T_ASSIGN;
          }
        case 75: break;
        case 24: 
          { yybegin(YYINITIAL);
          }
        case 76: break;
        case 51: 
          { return Parser.T_ESAC;
          }
        case 77: break;
        case 45: 
          { return Parser.T_LET;
          }
        case 78: break;
        case 33: 
          { return Parser.T_FAT;
          }
        case 79: break;
        case 35: 
          { return Parser.T_IF;
          }
        case 80: break;
        case 39: 
          { strval.append("\n");
          }
        case 81: break;
        case 53: 
          { return Parser.T_FALSE;
          }
        case 82: break;
        case 15: 
          { return Parser.T_LT;
          }
        case 83: break;
        case 23: 
          { return Parser.T_COMMA;
          }
        case 84: break;
        case 2: 
          { yylval = yytext();
                return Parser.TYPE;
          }
        case 85: break;
        case 21: 
          { return Parser.T_SEMICOLON;
          }
        case 86: break;
        case 32: 
          { return Parser.T_LTE;
          }
        case 87: break;
        case 40: 
          { strval.append("\b");
          }
        case 88: break;
        case 14: 
          { return Parser.T_NEGATE;
          }
        case 89: break;
        case 28: 
          { yybegin(multiline_comment); comment_nesting = 0;
          }
        case 90: break;
        case 10: 
          { return Parser.T_BACKSLASH;
          }
        case 91: break;
        case 20: 
          { return Parser.T_COLON;
          }
        case 92: break;
        case 6: 
          { return Parser.T_LPAREN;
          }
        case 93: break;
        case 3: 
          { yylval = yytext();
                return Parser.ID;
          }
        case 94: break;
        case 46: 
          { return Parser.T_THEN;
          }
        case 95: break;
        case 8: 
          { return Parser.T_RPAREN;
          }
        case 96: break;
        case 30: 
          { return Parser.T_OF;
          }
        case 97: break;
        case 50: 
          { return Parser.T_ELSE;
          }
        case 98: break;
        case 48: 
          { return Parser.T_CASE;
          }
        case 99: break;
        case 29: 
          { return Parser.T_FI;
          }
        case 100: break;
        case 34: 
          { return Parser.T_IN;
          }
        case 101: break;
        case 54: 
          { return Parser.T_CLASS;
          }
        case 102: break;
        case 27: 
          { yybegin(comment);
          }
        case 103: break;
        case 47: 
          { return Parser.T_TRUE;
          }
        case 104: break;
        case 17: 
          { return Parser.T_CAST;
          }
        case 105: break;
        case 36: 
          { comment_nesting++;
          }
        case 106: break;
        case 4: 
          { return Parser.T_MINUS;
          }
        case 107: break;
        case 49: 
          { return Parser.T_LOOP;
          }
        case 108: break;
        case 41: 
          { strval.append("\t");
          }
        case 109: break;
        case 22: 
          { return Parser.T_DOT;
          }
        case 110: break;
        case 12: 
          { return Parser.T_PLUS;
          }
        case 111: break;
        case 55: 
          { return Parser.T_WHILE;
          }
        case 112: break;
        case 13: 
          { return Parser.T_DIV;
          }
        case 113: break;
        case 5: 
          { 
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return Parser.EOF;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
